
import React, { useState, useEffect } from 'react';
import { useMarketingTool } from '@/contexts/MarketingToolContext';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { toast } from 'sonner';
import { X, Plus } from 'lucide-react';

const BusinessInfoStep: React.FC = () => {
  const { business, setBusinessInfo, setCurrentStep } = useMarketingTool();
  const [formData, setFormData] = useState({
    name: business.name,
    industry: business.industry,
    description: business.description || '',
    mainProblem: business.mainProblem || '',
  });
  
  const [products, setProducts] = useState<string[]>(business.products || []);
  const [newProduct, setNewProduct] = useState('');

  // Generate initial products when description changes
  useEffect(() => {
    // Only generate initial products if they don't exist and we have a description
    if (formData.description && products.length === 0) {
      generateProductSuggestions();
    }
  }, [formData.description]);

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const generateProductSuggestions = () => {
    if (!formData.description) {
      toast.error('Please enter a business description first');
      return;
    }

    // Generate 3 product suggestions based on the business description
    const description = formData.description.toLowerCase();
    const industry = formData.industry.toLowerCase();
    
    // Simple rule-based product generation based on keywords in the description
    const suggestedProducts: string[] = [];
    
    if (description.includes('software') || industry.includes('software') || industry.includes('tech')) {
      suggestedProducts.push('Business Analytics Dashboard');
      suggestedProducts.push('Cloud Storage Solution');
      suggestedProducts.push('Team Collaboration Platform');
    } else if (description.includes('health') || industry.includes('health') || industry.includes('medical')) {
      suggestedProducts.push('Patient Management System');
      suggestedProducts.push('Remote Health Monitoring');
      suggestedProducts.push('Medical Records Software');
    } else if (description.includes('finance') || industry.includes('finance') || industry.includes('banking')) {
      suggestedProducts.push('Investment Portfolio Tracker');
      suggestedProducts.push('Expense Management Tool');
      suggestedProducts.push('Financial Planning Software');
    } else if (description.includes('ecommerce') || description.includes('retail') || industry.includes('retail')) {
      suggestedProducts.push('Online Store Platform');
      suggestedProducts.push('Inventory Management System');
      suggestedProducts.push('Customer Loyalty Program');
    } else {
      // Default products if no specific keywords are found
      suggestedProducts.push('Premium Service Package');
      suggestedProducts.push('Professional Consulting');
      suggestedProducts.push('Enterprise Solution');
    }
    
    setProducts(suggestedProducts);
    toast.success('Generated product suggestions based on your business description');
  };

  const addProduct = () => {
    if (!newProduct.trim()) {
      toast.error('Please enter a product name');
      return;
    }
    
    if (products.includes(newProduct.trim())) {
      toast.error('This product already exists');
      return;
    }
    
    setProducts([...products, newProduct.trim()]);
    setNewProduct('');
    toast.success('Product added successfully');
  };

  const removeProduct = (index: number) => {
    const updatedProducts = [...products];
    updatedProducts.splice(index, 1);
    setProducts(updatedProducts);
    toast.success('Product removed');
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    // Basic validation
    if (!formData.name || !formData.industry || !formData.description) {
      toast.error('Please fill in all required fields');
      return;
    }

    if (products.length === 0) {
      toast.error('Please add at least one product');
      return;
    }

    // Pass the form data to setBusinessInfo
    // The context will handle generating the missing fields
    setBusinessInfo({
      ...formData,
      products: products,
      // Provide empty strings for the required fields
      // They will be auto-generated by the context
      targetAudience: '',
      mainSolution: '',
      existingCustomers: '',
    });
    
    setCurrentStep(2);
    toast.success('Business information saved!');
  };

  return (
    <div className="container py-8 max-w-3xl animate-fade-in">
      <h1 className="text-3xl font-bold text-center mb-8">Tell us about your business</h1>
      <p className="text-center text-gray-600 mb-8">
        We'll use this information to generate targeted marketing research
      </p>
      
      <Card>
        <CardHeader>
          <CardTitle>Business Details</CardTitle>
          <CardDescription>
            Provide details about your business to help us understand your needs
          </CardDescription>
        </CardHeader>
        <form onSubmit={handleSubmit}>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="name">Business Name *</Label>
                <Input
                  id="name"
                  name="name"
                  value={formData.name}
                  onChange={handleInputChange}
                  placeholder="Acme Corp"
                  required
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="industry">Industry *</Label>
                <Input
                  id="industry"
                  name="industry"
                  value={formData.industry}
                  onChange={handleInputChange}
                  placeholder="Technology, Healthcare, etc."
                  required
                />
              </div>
            </div>

            <div className="space-y-2">
              <Label htmlFor="description">Business Description *</Label>
              <Textarea
                id="description"
                name="description"
                value={formData.description}
                onChange={handleInputChange}
                placeholder="Describe what your business does..."
                rows={3}
                required
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="mainProblem">Main Problem You Solve</Label>
              <Textarea
                id="mainProblem"
                name="mainProblem"
                value={formData.mainProblem}
                onChange={handleInputChange}
                placeholder="What problem does your business solve?"
                rows={2}
              />
            </div>
            
            <div className="space-y-4 pt-4 border-t">
              <div className="flex justify-between items-center">
                <Label htmlFor="products" className="text-lg font-medium">Products/Services *</Label>
                <Button 
                  type="button" 
                  onClick={generateProductSuggestions} 
                  variant="outline" 
                  size="sm"
                  className="text-xs"
                >
                  Generate Suggestions
                </Button>
              </div>
              
              <div className="flex gap-2">
                <Input
                  id="newProduct"
                  value={newProduct}
                  onChange={(e) => setNewProduct(e.target.value)}
                  placeholder="Add a product or service..."
                  className="flex-grow"
                />
                <Button 
                  type="button" 
                  onClick={addProduct}
                  size="icon"
                  className="shrink-0"
                >
                  <Plus className="h-4 w-4" />
                </Button>
              </div>
              
              {products.length > 0 && (
                <div className="flex flex-wrap gap-2 mt-2">
                  {products.map((product, index) => (
                    <div 
                      key={index} 
                      className="bg-secondary text-secondary-foreground px-3 py-1 rounded-full flex items-center gap-1"
                    >
                      <span>{product}</span>
                      <button 
                        type="button" 
                        onClick={() => removeProduct(index)}
                        className="text-secondary-foreground/70 hover:text-secondary-foreground focus:outline-none"
                      >
                        <X className="h-3 w-3" />
                      </button>
                    </div>
                  ))}
                </div>
              )}
              
              {products.length === 0 && (
                <p className="text-sm text-muted-foreground">No products added yet. Add some products or generate suggestions based on your business description.</p>
              )}
            </div>
          </CardContent>
          <CardFooter className="flex justify-end">
            <Button type="submit" className="bg-marketing-600 hover:bg-marketing-700">Continue</Button>
          </CardFooter>
        </form>
      </Card>
    </div>
  );
};

export default BusinessInfoStep;
