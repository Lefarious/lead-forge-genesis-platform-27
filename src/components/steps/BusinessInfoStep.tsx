
import React, { useState } from 'react';
import { useMarketingTool } from '@/contexts/MarketingToolContext';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { toast } from 'sonner';
import { Plus, Trash } from 'lucide-react';

/**
 * BusinessInfoStep Component
 * 
 * This component allows users to input and manage basic information about their business,
 * including name, industry, description, and main problem solved.
 */
const BusinessInfoStep: React.FC = () => {
  const { business, setBusinessInfo, setCurrentStep, resetDataForStep } = useMarketingTool();
  
  // Form state management
  const [formData, setFormData] = useState({
    name: business.name,
    industry: business.industry,
    description: business.description || '',
    mainProblem: business.mainProblem || '',
    products: business.products || [],
  });

  // New product input state
  const [newProduct, setNewProduct] = useState('');

  /**
   * Handle input changes for form fields
   */
  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  /**
   * Add a new product to the list
   */
  const handleAddProduct = () => {
    if (!newProduct.trim()) {
      return;
    }
    
    setFormData(prev => ({
      ...prev,
      products: [...prev.products, newProduct.trim()]
    }));
    setNewProduct('');
  };

  /**
   * Remove a product from the list
   */
  const handleRemoveProduct = (index: number) => {
    setFormData(prev => ({
      ...prev,
      products: prev.products.filter((_, i) => i !== index)
    }));
  };

  /**
   * Handle form submission
   */
  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    // Basic validation
    if (!formData.name || !formData.industry || !formData.description || !formData.mainProblem) {
      toast.error('Please fill in all required fields');
      return;
    }

    // Reset any existing data first to ensure fresh generation in the next steps
    resetDataForStep(2);
    
    // Pass the form data to setBusinessInfo
    setBusinessInfo({
      ...formData,
      // Provide empty strings for the required fields
      // They will be auto-generated by the context
      targetAudience: '',
      mainSolution: '',
      existingCustomers: '',
    });
    
    setCurrentStep(2);
    toast.success('Business information saved!');
  };

  return (
    <div className="container py-8 max-w-3xl animate-fade-in">
      <h1 className="text-3xl font-bold text-center mb-2">Tell us about your business</h1>
      <p className="text-center text-gray-600 mb-8">
        We'll use this <span className="font-medium">business</span> information to generate targeted marketing research
      </p>
      
      <Card>
        <CardHeader>
          <CardTitle>Business Details</CardTitle>
          <CardDescription>
            Provide details about your business to help us understand your needs
          </CardDescription>
        </CardHeader>
        <form onSubmit={handleSubmit}>
          <CardContent className="space-y-4">
            {/* Business name and industry inputs */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="name">Business Name *</Label>
                <Input
                  id="name"
                  name="name"
                  value={formData.name}
                  onChange={handleInputChange}
                  placeholder="Acme Corp"
                  required
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="industry">Industry *</Label>
                <Input
                  id="industry"
                  name="industry"
                  value={formData.industry}
                  onChange={handleInputChange}
                  placeholder="Technology, Healthcare, etc."
                  required
                />
              </div>
            </div>

            {/* Business description textarea */}
            <div className="space-y-2">
              <Label htmlFor="description">Business Description *</Label>
              <Textarea
                id="description"
                name="description"
                value={formData.description}
                onChange={handleInputChange}
                placeholder="Describe what your business does..."
                rows={3}
                required
              />
            </div>

            {/* Main problem textarea - now required */}
            <div className="space-y-2">
              <Label htmlFor="mainProblem">Main Problem You Solve *</Label>
              <Textarea
                id="mainProblem"
                name="mainProblem"
                value={formData.mainProblem}
                onChange={handleInputChange}
                placeholder="What problem does your business solve?"
                rows={2}
                required
              />
            </div>

            {/* Products section */}
            <div className="space-y-2">
              <Label>Products/Services (Optional)</Label>
              <div className="space-y-2">
                {formData.products.map((product, index) => (
                  <div key={index} className="flex items-center space-x-2">
                    <Input value={product} readOnly />
                    <Button 
                      type="button" 
                      variant="ghost" 
                      size="icon"
                      onClick={() => handleRemoveProduct(index)}
                    >
                      <Trash className="h-4 w-4" />
                    </Button>
                  </div>
                ))}
                <div className="flex items-center space-x-2">
                  <Input 
                    placeholder="Add a product or service"
                    value={newProduct}
                    onChange={(e) => setNewProduct(e.target.value)}
                  />
                  <Button 
                    type="button" 
                    variant="outline" 
                    size="icon"
                    onClick={handleAddProduct}
                  >
                    <Plus className="h-4 w-4" />
                  </Button>
                </div>
              </div>
            </div>
          </CardContent>
          <CardFooter className="flex justify-end">
            <Button type="submit" className="bg-marketing-600 hover:bg-marketing-700">Continue</Button>
          </CardFooter>
        </form>
      </Card>
    </div>
  );
};

export default BusinessInfoStep;
